{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45bdc606",
   "metadata": {},
   "outputs": [],
   "source": [
    "BOARD=''\n",
    "PLAYER_O='O'\n",
    "PLAYER_X='X'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "31be8000",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_board(board): #Building the board\n",
    "    for row in board:\n",
    "        print(\"|\".join(row))\n",
    "        print(\"-----\")\n",
    "\n",
    "\n",
    "def check_winner(board): #Check if any player has won the game\n",
    "    for row in board: #Rows\n",
    "        if row[0] == row[1] == row[2] != BOARD:\n",
    "            return row[0]\n",
    "    for col in range(3): #Columns\n",
    "        if board[0][col] == board[1][col] == board[2][col] != BOARD:\n",
    "            return board[0][col]\n",
    "    if board[0][0] == board[1][1] == board[2][2] != BOARD: #Diagonals\n",
    "        return board[0][0]\n",
    "    if board[0][2] == board[1][1] == board[2][0] != BOARD:\n",
    "        return board[0][2]\n",
    "\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8c797214",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(board):\n",
    "    winner = check_winner(board)\n",
    "    if winner == PLAYER_X:\n",
    "        return 1  # AI wins\n",
    "    elif winner == PLAYER_O:\n",
    "        return -1  # Player wins\n",
    "    else:\n",
    "        return 0 # Draw\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "34829612",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implementation of the Minimax algorithm with Alpha-Beta pruning\n",
    "def minimax(board, depth, alpha, beta, maximizing):\n",
    "    score = evaluate(board)\n",
    "\n",
    "    if score is not None:\n",
    "        return score\n",
    "\n",
    "    if maximizing:\n",
    "        best_score = MIN_SCORE\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if board[i][j] == BOARD:\n",
    "                    board[i][j] = PLAYER_X\n",
    "                    best_score = max(best_score, minimax(board, depth + 1, alpha, beta, False))\n",
    "                    board[i][j] = BOARD\n",
    "                    alpha = max(alpha, best_score)\n",
    "                    if beta <= alpha:\n",
    "                        break \n",
    "        return best_score\n",
    "    else:\n",
    "        best_score = MAX_SCORE\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if board[i][j] == BOARD:\n",
    "                    board[i][j] = PLAYER_O\n",
    "                    best_score = min(best_score, minimax(board, depth + 1, alpha, beta, True))\n",
    "                    board[i][j] = BOARD\n",
    "                    beta = min(beta, best_score)\n",
    "                    if beta <= alpha:\n",
    "                        break \n",
    "        return best_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5d0ee0d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ai(board): #The AI will use the minimax algorithm to make the moves\n",
    "    best_score = float('-inf')\n",
    "    best_move = None\n",
    "    for i in range(3):\n",
    "        for j in range(3):\n",
    "            if board[i][j] == BOARD:\n",
    "                board[i][j] = PLAYER_X\n",
    "                score = minimax(board, 0, float('-inf'), float('inf'), False)\n",
    "                board[i][j] = BOARD\n",
    "                if score > best_score:\n",
    "                    best_score = score\n",
    "                    best_move = (i, j)\n",
    "    board[best_move[0]][best_move[1]] = PLAYER_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10dc6e9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Tic-Tac-Toe!\n",
      "||\n",
      "-----\n",
      "||\n",
      "-----\n",
      "||\n",
      "-----\n",
      "Enter a row number between 0 and 2>0\n",
      "Enter a column number between 0 and 2>0\n",
      "O|X|\n",
      "-----\n",
      "||\n",
      "-----\n",
      "||\n",
      "-----\n",
      "Enter a row number between 0 and 2>1\n",
      "Enter a column number between 0 and 2>1\n",
      "O|X|X\n",
      "-----\n",
      "|O|\n",
      "-----\n",
      "||\n",
      "-----\n",
      "Enter a row number between 0 and 2>2\n",
      "Enter a column number between 0 and 2>2\n",
      "O|X|X\n",
      "-----\n",
      "|O|\n",
      "-----\n",
      "||O\n",
      "-----\n",
      "You won\n"
     ]
    }
   ],
   "source": [
    "def play_game(): #Game\n",
    "    board = [[BOARD] * 3 for _ in range(3)]\n",
    "    print(\"Welcome to Tic-Tac-Toe!\")\n",
    "\n",
    "    while True:\n",
    "        print_board(board)\n",
    "        row = int(input(\"Enter a row number between 0 and 2>\"))\n",
    "        col = int(input(\"Enter a column number between 0 and 2>\"))\n",
    "\n",
    "        if board[row][col] != BOARD:\n",
    "            print(\"The spot you selected is occupied, try a different spot\")\n",
    "            continue\n",
    "\n",
    "        board[row][col] = PLAYER_O\n",
    "\n",
    "        if check_winner(board) == PLAYER_O:\n",
    "            print_board(board)\n",
    "            print(\"You won\")\n",
    "            break\n",
    "\n",
    "        ai(board)\n",
    "\n",
    "        if check_winner(board) == PLAYER_X:\n",
    "            print_board(board)\n",
    "            print(\"You lost\")\n",
    "            break\n",
    "\n",
    "        if all(BOARD not in row for row in board):\n",
    "            print_board(board)\n",
    "            print(\"It's a draw!\")\n",
    "            break\n",
    "\n",
    "play_game()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
